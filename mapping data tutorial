################################################# mapping data tutorial ########################################

InstallPacks = function() {
  install.packages("ggmap")
  install.packages("rgeos")
  install.packages("maptools")
  install.packages("dplyr")
  install.packages("tidyr")
  install.packages("tmap")
  install.packages("leaflet")
  print("Ready captain!")
}

InstallPacks()

LoadPacks = function() {
  library("ggmap")
  library("rgeos")
  library("maptools")
  library("dplyr")
  library("tidyr")
  library("tmap")
  library("leaflet")
  library("rgdal")
  print("aye aye captain!")
}

LoadPacks()

lnd <- readOGR("data", "london_sport")

# spatial objects have two slots: a data and a non-data slot (geographic coordinates). Use @ to select either one

head(lnd@data, n = 10)
mean(lnd$Partic_Per)

#checking the class of variables in the dataset
sapply(lnd@data, class)
lnd$Pop_2001 <- as.numeric(as.character(lnd$Pop_2001)) #coercing Pop_2001 into numerical class
sapply(lnd@data, class) # Pop_2001 now numeric

############################################ plotting data from lnd object #####################################

# an example of functional ploymorphism as the plot function changes its output depending on fed data
plot(lnd)
plot(lnd@data)

plot(lnd, col = "lightgrey")
high <- lnd$Partic_Per > 25
plot(lnd[low, ], col = "green", add = T)

medium <- lnd$Partic_Per > 20 & lnd$Partic_Per < 25
plot(lnd[medium, ], col = "yellow", add = T)

low <- lnd$Partic_Per <= 20
plot(lnd[low, ], col = "red", add = T)

# how to select quadrants

lat <- coordinates(gCentroid(lnd))[[1]]
lng <- coordinates(gCentroid(lnd))[[2]]

east <- sapply(coordinates(lnd)[,1], function(x) x > lat)
north <- sapply(coordinates(lnd)[,2], function(x) x > lng)

lnd@data$quadrant[east & north] <- "northeast"

######################################## create new map of Ramnicu Valcea #######################################

BeginFunction = function() {
  install.packages("rworldmap")
  install.packages("mapproj")
  install.packages("ggmap")
  print("Ready chief!")
}

BeginFunction()

AllPacks = function() {
  library(rworldmap)
  library(mapproj)
  library(ggplot2)
  library(ggmap)
  library(plyr)
  print("Ready chief!")
}

AllPacks()

# to pull a map off of google maps API you need to get the google geocode for it. To do this, 
# access this link: https://developers.google.com/maps/documentation/geocoding/start and use the link in the 
# example using your own address and key. You can get the key by pressing the key button at the top righ-hand
# side of the page. Then use the google lat/long coordinates as they are used in the example below in the 
# plot function. Although it is a more complicated way of pulling a map, you can use it to pull a map of any
# address you can think of typing in the link.

newMap <- getMap(resolution = "low")
plot(newMap, main = "World")
plot(newMap
     ,xlim = c(45.139657, 24.3852712) 
     ,ylim = c(45.06594339999999, 24.3183231) 
     ,asp = 1
     ,main = "Ramnicu Valcea")


     
